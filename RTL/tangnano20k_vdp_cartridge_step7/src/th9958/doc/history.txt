th9958(仮) 開発日誌
-------------------------------------------------------------------------------
2025年6月25日 1日目
	OCM-PLD の V9958コアを移植したものが、微妙なタイミング不整合で、画面が崩れた
	のをきっかけに、「ちゃんと自分で把握しきれるものを作ろう」と思い立つ。
	全体のブロック図を作成。
	th9918_timing_control.v を作成。

2025年6月26日 2日目
	th9918_timing_control.v を vdp_timing_control_ssg.v に改名。
	vdp_timing_control_g123m.v を一部分作成。
	vdp_cpu_interface.v を一部分作成。

2025年6月27日 3日目
	vdp_timing_control_ssg.v のポートを少し改変。
	vdp_timing_control の中のブロック構成図を作成。
	g123m のタイミングチャートを作成。
	vdp_timing_control_g123m.v を作成。

2025年6月28日 4日目
	vdp_cpu_interface.v を一部分作成。
	vdp_cpu_interface のテストベンチを作成。
	VRAM読み書きアクセスのデバッグ。

2025年6月29日 5日目
	VRAM読み書きアクセスのデバッグ完了。
	vdp_color_palette.v の設計を開始、一部(パレット→RGB888値変換)実装。
	vdp_color_palette_ram.v を設計、完了。
	vdp_timing_control_sprite_line_ram を設計、完了。
	vdp_timing_control_sprite_info_ram を設計、完了。
	vdp_timing_control_sprite を設計開始。

2025年6月30日 6日目
	vdp_timing_control_g4567.v の設計を開始、一部を実装。
	vdp_vram_interface.v の設計を開始、entity 実装。

2025年7月1日 7日目
	vdp_timing_control_ssg.v に走査線割り込み・垂直同期割り込みのタイミング生成回路を追加
	vdp_cpu_interface.v にその信号を受けて int_n を作る回路を追加
	vdp_timing_control.v を作成。vdp_timing_control_ssg のインスタンス記述を追加。
	vdp_timing_control_g4567.v のテストベンチを作成。波形目視にて概ね期待通り動作していることを確認。

2025年7月2日 8日目
	vdp_timing_control.v に vdp_timing_control_g123m のインスタンス記述を追加。
	vdp_timing_control.v に vdp_timing_control_g4567 のインスタンス記述を追加。
	vdp_timing_control_t12.v の設計を開始、一部を実装。

2025年7月3日 9日目
	vdp_timing_control_ssg.v にスクロールレジスタの影響を受けない座標出力を追加。
	vdp_timing_control_ssg.v に水平スクロールの処理を追加。
	vdp_timing_control_t12.v のテストベンチを作成。
	vdp_timing_control_t12.v の一部を実装、バグを修正。

2025年7月4日 10日目
	vdp_timing_control_t12.v の一部を実装、バグを修正。
	vdp_timing_control_g123m.v の一部を修正。
	vdp_timing_control_g4567.v の一部を修正。
	vdp_timing_control.v に vdp_timing_control_t12 のインスタンス記述を追加。
	vdp.v に vdp_timing_control, vdp_color_palette, vdp_vram_interface のインスタンス記述を追加。
	vdp.v の cpu_interface のインスタンス記述を一部修正。

2025年7月5日 11日目
	vdp_video_out_bilinear.v を実装。
	vdp_video_double_buffer.v を実装。
	vdp_video_ram_line_buffer.v を実装。
	vdp_video_out.v を実装。
	vdp_video_out_bilinear の回路図を作図完了。
	vdp_video_double_buffer の回路図を作図開始。

2025年7月6日 12日目
	vdp_video_double_buffer の回路図を作図完了。

2025年7月7日 13日目
	Covid-19罹患によりダウン。一回休み。

2025年7月8日 14日目
	test_vdp_timing_control のテストベンチを作成。
	vdp_timing_control のバグを修正。
	vdp_color_palette に、リセット直後のカラーパレット初期化回路を追加。
	vdp_vram_interface のバグを修正。
	test_vdp のテストベンチを作成。
	vdp 組み上げに関わるバグを修正。
	FPGA用の top階層に組み込み。
	FPGA に書き込んで動作を見てみるものの、HDMIモニターに認識されず。

2025年7月9日 15日目
	Covid-19によりダウン。一回休み。

2025年7月10日 16日目
	top階層で vdp に供給しているクロックを間違えていたバグを修正。HDMIモニター認識される。
	vdp_upscan, vdp_upscan_line_buffer を実装。vdp へ組み込み。
	テストベンチの VRAMモデルにミスがあったのを修正。
	g123m の VRAMアドレス生成にミスがあることを発見。

2025年7月11日 17日目
	cpu_interface の制御レジスタ書き込みに正常に書き込めないバグがあったのを修正。
	g123m のパターンネームテーブルのアドレス計算を間違えるミスがあったのを修正。
	cpu_interface の VRAMアクセス（書き込み・読みだしとも）にバグがあったのを修正。
	vram_interface の CPUからの VRAM読みだしにバグがあったのを修正。
	この時点で、FPGA に書き込み、SCREEN1 の一部が拡大表示されるようになったのを確認。
	垂直位置・水平位置・水平拡大率が合っていなかったのを修正。
	video_out の SRAM の使い方を修正し、水平方向が太すぎる問題を解消。位置はまだずれている。

2025年7月12日 18日目
	upscan, video_out の中の SRAM の使い方を間違えていたバグを修正。
	水平位置の調整、変倍率を調整し、SCREEN1, 2, 3 が正常なサイズ・位置に表示されるようになったのを確認。
	CPU からの VRAM Read/Write, VDP Command からの VRAM Read/Write において、
	アクセスタイミングを間違えていたバグを修正し、表示がたまに乱れる問題が解消したのを確認。
	R#1 bit6: DISPLAY ON の機能を実装。R-TYPE にてゲーム開始時にゴミが出なくなったのを確認。

2025年7月13日 19日目
	SCREEN0 の表示がおかしかった問題を修正。color_palette の中で t12 の出力を使っていなかったのが原因。
	Sprite の実装を開始。

2025年7月14日 20日目
	Sprite_select_visible_planes のテストベンチを作成。
	Sprite_select_visible_planes のいくつかのバグを修正して、テストベンチ上の波形は期待通りになったことを確認。
	Sprite_info_collect のテストベンチを作成。

2025年7月15日 21日目
	Sprite_info_collect のテストベンチのバグを修正。
	Sprite_info_collect のバグを修正し、テストベンチ上の波形は期待通りになったことを確認。
	Sprite_makeup_pixel の実装を開始。

2025年7月16日 22日目
	Sprite_makeup_pixel の実装の続き。
	Sprite_info_collect の中に、info RAM を追加。構造を修正。

2025年7月17日 23日目
	スプライト関連の実装の続き。

2025年7月18日 24日目
	スプライト関連の実装の続き。頭の中を整理するために、一端情報整理。

2025年7月19日 25日目
	Sprite_makeup_pixel の実装完了。
	FPGAに書き込んで確認すると、表示がぐちゃぐちゃ。BG も全く見えない。

2025年7月20日 26日目
	Sprite の中で不定が伝搬しているバグがあったのを修正し、
	FPGAに書き込んで確認すると BG の表示は正常に戻り、スプライトだけまだおかしい状態。

2025年7月21日 27日目
	Display Off 時にスプライトが表示されるバグを修正。
	Sprite の表示不具合バグを修正。R-TYPE や イリーガスでスプライトが表示されるのを確認。
	ただし、まだ残骸が残る。透明スプライトが黒くなる、と言った不具合あり。
	8x8 2倍拡大スプライトにおいて、左半分しか表示されないバグを修正。
	スプライトが左へ 6ドットズレて表示されるバグを修正。
	スプライトが下端に来ると、下端の1ラインが下の周辺領域まで伸びて表示されるバグを修正。
	スプライトが下端 1ドットはみ出すバグを修正。
	スプライトの Y 座標が、208 (216) のときに、それ以降のスプライトを表示しない機能を実装。
	EC bit の挙動がおかしいことが発覚。

2025年7月22日 28日目
	EC bit の挙動不審バグを修正。
	スプライトに色0 を指定すると黒く表示されるバグを修正。
	スプライトの Y 座標が、208 (216) のときに、それ以降のスプライトを表示しない機能が、期待通り動いていないバグを修正。

2025年7月23日 29日目
	スプライトの表示位置がまだ1ドット左にずれていたのを修正。
	スプライトの衝突判定処理を実装。
	I/Oポートをいったん 88h に変更。
	スプライトの衝突座標を保持する機能を実装。
	一部、配線が途切れていたミスを修正。
	VDPのテスト用のプログラム (MSX-DOS用) を作り始める。

2025年7月24日 30日目
	SCREEN0(W40) における R#27 の挙動を実装。
	VDPのテスト用のプログラムの続き。
		SCREEN0(W40)
			39桁しか表示されていないバグを修正
			R#7 に色をセットして、期待通りの色になるのを確認
			R#23 でフォント形状がスクロールするのを確認
			R#16, Port2 を使ってもパレットが変わらないバグを発見

2025年7月25日 31日目
	R#18 (set adjust) の機能を実装。
	VDPのテスト用のプログラムの続き。
			R#26, R#27 のテストを追加。
			R#18 のテストを追加。
			R#18 が垂直方向にしか作用していないバグを発見。

2025年7月26日 32日目
	R#18 が垂直方向にしか作用しないバグを修正。

2025年7月27日 32日目
	SCREEN1 で、水平スクロール時に左端が乱れるバグを修正。

2025年7月28日 33日目
	SCREEN5 にて、水平スクロール位置によって、画像がでない位置があるバグを修正。
	水平スクロールした際に、右端がガタガタと動くバグを修正。
	SCREEN6 の色がおかしいバグを修正。

2025年7月29日 34日目
	VDPのテスト用プログラムに、SCREEN5 の画像表示を追加。
		期待通りに画像が表示されない。
		画面全体を一色に塗りつぶすのも動かない。原因不明。

2025年7月30日 35日目
	R#14 に対する書き込みがおかしかったバグを修正。
	垂直同期割り込み・走査線割り込みを disable にしても、一度発生した割り込みが出続けるバグを修正

2025年7月31日 36日目
	vram_interface の仕様を変更。VRAMアクセス 1回につき 8clk かかっていたのを、4clk に削減。

2025年8月1日 37日目
	g4567 で、VRAM address要求時に g45 と g67 でアドレス値があべこべになっていたバグを修正。
	g4567 で、g45 の上位4bit, 下位4bit の扱いを間違えていたバグを修正。
	vram_interface で、CPUによる VRAM read/write 直後のその他の VRAMアクセスが無視されるバグを修正。
	sprite_disable = 1 の場合に、スプライトの残骸が表示されるバグを修正。

2025年8月2日 38日目
	SCREEN5 の表示が正常に出たり出なかったり、起動の度に不安定。
	SCREEN0, 1 でも、正常に表示されるケースと、周辺色が赤・映像部分が黒になるケースがあり、
	不正な表示なる確率が、改修の度に増えているように見える現象が発生。
	VDP と SDRAM Controller との間にタイミング割れが発生しており、おそらくこれが原因と推察。
	t12, g123m, g4567 が分かれているのを統合することで、冗長な FF を減らし、改善しないか検討することを決める。
	統合したモジュールは、screen_mode と言う名前で、一部実装まで終えた。

2025年8月3日 38日目
	screen_mode の実装の続き。

2025年8月4日 39日目
	画面の乱れは、VDP(42MHz)→SDRAM controller(85MHz) のクロック載せ替えのところでタイミング割れしてるのが原因と推測。
	FF を挟んでもタイミング割れは解消しない。

2025年8月5日 40日目
	VDP も 85MHz に揃えてみる。
	VDP単独のシミュレーションでは、それなりに動いているような波形が得られたので、FPGA に書き込んでみるものの、
	表示が全く出ない。VDP単独シミュレーションでは確認できない msx_slotとの通信部分に問題があると予想。
	VDPカートリッジ全体をシミュレーションできる環境を作成。

2025年8月6日 41日目
	upscan の中で、line memory のアドレス生成が、2倍速になったクロックに合わせて変更されていなかったバグを修正。

2025年8月7日 42日目
	screen_mode の中で、32bit で得られた VRAM読みだし結果を選択する信号のラッチタイミングが誤っていたバグを修正。
	screen_mode の中で、ff_screen_h_active の 1→0 のタイミングが 2倍速になったクロックに合わせて変更されていなかったバグを修正。
	sprite の VRAMアクセスが、screen_mode の右端の VRAMアクセスと競合する場合があるバグを修正。
	video_out のラインメモリへの書き込み時に、余計な 0 を上書きして出力映像を消してしまうバグを修正。
	→ FPGA に書き込んで映像が出るようになったのを確認。まだ表示がおかしい。

2025年8月8日 43日目
	screen_mode が要求した VRAMリードの応答が返ってくる前に、CPU VRAM Write/Read が発生すると、vram_interface は、
	応答の送り先を CPU へ切り替えてしまって、screen_mode の方には届かないバグを修正
	sdram controller に対して、1ラインの終わりに refresh を発行する機能を追加

2025年8月9日 44日目
	SDRAM の初期化時の待機時間が足りていないバグを修正
	SDRAM の初期化時の待機時間中に CKE=L に固定されており、かつ リセット後は DQM が直前の値で hold されているバグを修正
	→ これにより起動の度におかしくなる場合がある問題が解消
	sdram controller に対して、readアクセスをすると、応答の rdata_en が 2cyc 出ていたバグを修正
	sdram controller に対して発行する refresh の最中に cpu vram read/write や vdp commmand の vram read/write が発生した場合に
	それらのアクセスをブロックする機能のタイミングがズレていてブロックできていなかったバグを修正
	→ この時点で、SCREEN5 の表示にゴミが混じる問題が解消

2025年8月10日 45日目
	「screen_mode へ統合」、「85MHz に変更」した時点で、いろいろ壊してしまったので、全スクリーンモードの動作確認をやり直す必要あり。
	それに合わせて th9958_progress.xlsx を修正。
	SCREEN0(W40, W80) の VRAMアクセスの valid信号生成回路が無かったバグを修正
	SCREEN0(W40, W80) にて、内部のシフトレジスタに値がコピーされないバグを修正
	→ この時点で、全く表示が出なくなっていた SCREEN0 (W40) の表示が出るようになったのを確認。ただしまだフォントがおかしい。

2025年8月11日 46日目
	SCREEN0(W40) の表示が崩れる問題の調査。
	screen_mode によるリード要求の応答が返ってくるタイミングに、CPU VRAM read の要求が絶妙なタイミングで被ると、
	CPU へ応答を返却する、と言う情報が失われてしまう場合があるバグを修正。
	SCREEN0(W40,W80)のときでも、スプライト回路が稼働していて、表示用アクセスの邪魔をするバグを修正。
	SCREEN0(W40)で、水平 42桁表示されるバグを修正。
	refresh のタイミングが、h_count の end をトリガーにしており、画面の水平中央でも refresh が発動していたバグを修正。

2025年8月12日 47日目
	SCREEN1 で、右端に余計な 1ドットがくっついて水平 257dot になっていたバグを修正。
	水平スクロールで R#26 に設定した値が 16dot単位のスクロールになっていたバグを修正。
	R#25 bit0 = 1 の場合の2画面水平スクロールを実装。
	R#8 bit3 (VR bit) を実装。VR bit = 0 にすると、R#14 が効かなくなって VRAM 8000h に書き込めなくなるようなので、
	その挙動を実装。表示まで崩れるようにしてしまったが、実機での動作を確認後に合わせる。
	R#25 bit0 の挙動を SCREEN5 で確認。問題なく動作。

2025年8月13日 48日目
	FS-A1GT 実機で動作を確認。
		(1) 212ラインモードは 192ラインモードに対して上に 10ラインシフトした位置に表示される
		(2) EO bit = 1 にした場合の交互表示は、偶数ページ表示タイミングは偶数ページをそのまま表示。
		    奇数ページ表示タイミングは偶数ページと奇数ページを、それぞれ偶数フィールド、奇数フィールドに表示する。
		(3) BASIC の SET SCROLL 命令は、V-Sync待ちや、交互表示のカウンタリセットなど余計な処理がモリモリ入っている。
		(4) SET SCROLL による水平スクロールでは、交互表示のカウンタリセットがかかるが、R#26, R#27 の直接操作ではリセットかからない。

	上記を踏まえて、212ラインモードにおける 10ラインシフトを実装。
	SCREEN1～7 で背景色が 0 だった場合に、透明扱いにして周辺色になる動作が期待通りに動かないバグを修正。
	SCREEN8 のときに、下位 4bit だけ通過するようにマスクしていたバグを修正。（SCREEN7 のコードと間違えて SCREEN8 のコードを書いていた）
	SCREEN6, 7, 8 で問題なく表示されることを確認。

2025年8月14日 49日目
	左端 8画素マスク機能を実装。
	水平拡大回路の挙動がおかしくなっていたバグを修正。
	SDRAM Controller の書き込みを 32bit単位 (DQM付き) に変更。
	VDP Command関連のレジスタ書き込み（R#32～R#46）・レジスタの実体を実装。コマンドの処理回路自体はまだ。

2025年8月15日 50日目
	VDP Command のキャッシュメモリを設計開始。

2025年8月16日 51日目
	VDP Command のキャッシュメモリのテストベンチを AI に作らせ、そのテストケース全てをパス。

2025年8月17日 52日目
	VDP Command にステータスレジスタポートを追加。CPU interface にその読み出しを追加。
	VDP Command STOP, PSET, POINT を実装。
	R#17経由の間接レジスタライト機能が未実装だったバグを修正。
	キャッシュメモリの中で、アドレスが 2bit 右シフトされてしまうバグを修正。

2025年8月18日 53日目
	キャッシュメモリのデバッグの続き。
	VDP Cartridge の階層の BUSDIRバグを修正して、ステータスレジスタリードが動作するようになった。

2025年8月19日 54日目
	VDP Command LINE の実装とデバッグ。
	キャッシュメモリの中で、キャッシュラインを全て使用済みの状態で、それらに一度でも書き込みをした後、
	新しいキャッシュラインを読みだすと、書き込み済みの古いキャッシュラインを DRAMへ書き出さずに、
	新しいキャッシュラインで上書きしてしまうバグを修正。
	これにより、LINE が正常に動作するようになる。

2025年8月20日 55日目
	VDP Command LMMV, HMMV の実装とデバッグ。
	timing_control_ssg が出す refresh のタイミングが 1clock 早い。これを SDRAM Controller へ直接
	渡すのでは無く、vram_interface の中で 1回 FF をとおしてから SDRAM Controller へ渡すようにすることで、
	早い問題を解消。（早い事が原因で、refresh パルス発生の 1clk手前で VDP Command のアクセスリクエスト
	が発生するとフリーズする問題があった。それが解消。）
	論理転送用の書き込みアドレスを SX基準で選んでいたバグを修正。DX基準。
	LMMV, HMMV は問題なく動作するようになった。ロジカルオペレーション EOR も確認。

2025年8月21日 56日目
	修正を入れる度に、cpu_interface の CPUからのVRAM書き込み が動かなくなったりする。
	シミュレーションでは問題なし。レジスタアクセスも問題なし。
	この不安定を解消するために、試行錯誤。

2025年8月22日 57日目
	たまたま安定したので、LINE, LMMV, HMMV, LMMM, HMMM のバグを潰す。全てのバグを修正したと思ったところで
	また不安定になる。最後の修正が正しいかどうかの確認が出来ない。

2025年8月23日 58日目
	本体のリセットボタンを押しても、カートリッジにリセットがかからないバグを修正。
	MSXのカートリッジスロット信号の処理を見直し。

2025年8月24日 58日目
	MSXのカートリッジスロット信号の処理を見直し。
	リフレッシュとCPUからのVRAM書き込みアクセスが被ったときに、かきこみしっぱするバグを修正。

2025年8月25日 58日目
	MSXのカートリッジスロット信号の処理を見直し。I/Oアクセス専用に修正。
	デバッグ用の LED制御回路と、デバッグ制御回路を追加。
	カートリッジスロット信号の処理回路で、処理すべき I/Oアドレス以外でも bus_valid を出していたバグを修正。
	→ 表示が崩れたり、VRAMに書き込めなくなるバグが解消。
	アドレス 88h への書き込みを、89h か 8Bh と誤認するバグが発生。
	VDPに到達する時点で bus_address が 88h でない値に変異しているらしい。

2025年8月26日 59日目
	LMMM, HMMM で、水平・垂直ともに転送量が１多かったバグを修正。
	カートリッジ基板で、はめ込んでいるだけだった部分をしっかり半田付け。これにより不安定な動作が解消。

2025年8月27日 60日目
	LINE のテストプログラムを作る。
	→ ( NX, NY ) = ( 0, 0 ) の時に無限に長いラインを引いてしまうバグ（ LMMM, HMMM 対応で混入したバグ ）を修正
	→ MAJ=1, NY=0 のときに、SX の値によっては、無限に長いラインを引いてしまうバグ（左右はみ出しチェックで混入したバグ）を修正
	→ 線の形状が微妙に違っていたバグを修正

2025年8月28日 61日目
	LINE のテストの続き。
	→ 左右にはみ出した場合に、反対側から続きを描画してしまうバグを修正
	→ 始点が画面外だった場合に何もせずにコマンド終了する回路が抜けていた（LINEだけでなく、PSET、POINTも）のを追加

2025年8月29日 62日目
	SRCHコマンドを実装。
	→ 動作させるとハングするバグを修正。
	→ S#8, S#9 を読むと値がずれている問題が発覚。

2025年8月30日 63日目
	SRCHコマンドをデバッグ。
	→ EQフラグの扱いが、論理逆転していたバグを修正。
	→ 検出結果が 1 ズレてしまうバグを修正。
	→ 始点が画面外だった場合の BDビットの扱いを実機に合わせた。

	LINEコマンドの挙動を修正。
	→ page0 の上からは見出した場合は、page0 の上端で描画が停止する。

2025年8月31日 64日目
	HMMC, LMMC, LMCMコマンドを実装。
	HMMC, LMMCのテストプログラムを作成。
	→ SX,SYを使わないコマンドでも、SX,SY が作用してしまうバグを修正

2025年9月1日 65日目
	YMMMのテストプログラムを作成。
	→ 転送が終わらずに無限ループしてしまうバグを修正
	SRCHコマンドの挙動を確認するために、SRCHコマンドのテストを増強

2025年9月1日 65日目
	SRCHコマンドの挙動を確認するために、SRCHコマンドのテストを増強
	→ BDフラグが S#2のリードでクリアされると勘違いしていたが、
	  S#9 のリードでクリアされることが判明。
	→ テストの結果が A1GT と一致したので、SRCH の基本テスト完了。

2025年9月2日 66日目
	LMCMコマンドのテストプログラムを作成。
	→ ハングアップする問題が発生。

2025年9月3日 67日目
	LMCMコマンドのデバッグ
	→ TR bit の扱いがおかしかったバグを修正
	→ 終了条件がおかしかったバグを修正

2025年9月4日 68日目
	LMCMコマンドのデバッグ
	→ TR bit の扱いがおかしかったバグを修正
	→ 使用しない SX の値を見て、変なタイミングで終了してしまう場合があるバグを修正
	→ LMCMテストプログラムにて、終了時のレジスタ設定がミスっていたバグを修正
	→ テストの結果が A1GT と一致したので、LMCM の基本テスト完了。

	先日のリファクタリングで、PCGモードの表示が壊れていた問題に気が付く
	→ VRAM address を過剰にクリアしていたバグを修正
	→ SCREEN0 (W40), SCREEN1 の表示が出るようになったのを確認。

2025年9月5日 69日目
	SCREEN0 (W80) の実装
	→ 縦縞が入る現象が発生
	→ screen_mode の実装を見直し。SCREEN7/8 にてアクセスがおかしい問題を発見、修正。
	→ SCREEN0(W40/W80) における R#2 の扱いがおかしい問題を発見、修正。

2025年9月6日 70日目
	SCREEN0 (W80) のデバッグの続き
	→ アクセス順序を整理して、異常の原因を突き止め修正、縦縞解消
	→ BLINK を実装/テスト
	VDPコマンドのカウンター終了の信号を整理
	→ HMMV で左右にはみ出すとコマンドが終了しなくなり垂直方向に無限に塗り続けるバグを修正

2025年9月6日 71日目
	YJKモードの回路を実装開始
	→ これまでの実装の構造が合わないことが判明。合う形に構造を改変。結構大変。
	→ 改変後に、これまでの画面モードがこれまで通り表示されることを確認。

2025年9月7日 72日目
	YJKモードのテストプログラムを作成

2025年9月8日 73日目
	YJKモードのテストプログラムの続きを実装

2025年9月9日 74日目
	YJKモードのテストプログラムの続きを実装
	→ JKのサンプリングタイミングがおかしいバグを修正。
	→ 水平スクロールすると色がおかしくなるバグを発見。
	→ 周辺色の色がおかしいバグを発見。

2025年9月10日 75日目
	color_palette の中身のタイミングを図示して整理

2025年9月11日 76日目
	左 8画素マスク機能が、いつの間にか 240画素マスク機能に変わっていたバグを修正。
	palette0 を周辺色に置き換える処理が 1画素ズレていたバグを修正。
	YJKモードで、水平スクロールすると色がおかしくなるバグを修正。

2025年9月12日 77日目
	スプライトのテストプログラムを作成。
	スプライトが表示されなくなっていることを確認。

2025年9月13日 78日目
	スプライト周り、動作クロックの変更時に十分な修正が成されて居らず、あちこちにバグがあるのを修正。
	→ クロック変更時の対応ミスを多数修正して、スプライト 8x8, 16x16 の拡大表示が出るのを確認。
	→ 微妙に表示位置がずれていたバグを修正

2025年9月14日 79日目
	スプライトモード2のテストプログラムを作成。
	スプライトモード2のスプライトカラーテーブルアドレス計算を実装。
	→ テストを動かすと、スプライトモード1 とほぼ共通のはずの、パターンジェネレーター・アトリビュート
	の読みだしがおかしいバグを発見。まともに表示されない。
	→ アトリビュートのアドレス計算がおかしかったバグを修正。
	→ カラーテーブルのアドレス計算がおかしかったバグを修正。
	→ Y=208, 216 の区別は 212line mode ではなく、Sprite mode1,2 であるので、そうなるように修正

2025年9月15日 80日目
	・スプライトモード2の 16x16スプライトの右半分が壊れる現象、原因を掴めないのでいったん保留。
	・ICビットを実装
	・CCビットも一部実装
	・V9968 の新機能の実装に取りかかる
	→ 拡張モード選択レジスタを R#20 に実装
	→ VRAM 256KB モードを実装
		→ いくつかの機能が壊れたので、一つ一つ潰していく。
			→ LINE で線の描画がおかしくなるバグを修正
			→ SCREEN8 で HMMV による矩形塗りつぶしが縦縞になるバグを修正
			→ LMCM が終わらないバグがあったのを修正
			→ LMMV の垂直サイズがおかしくなる場合があったバグを修正

2025年9月16日 81日目
	R#20 EPALレジスタの挙動を実装。しかし、切り替えると真っ黒画面。パレットに設定に行くところにミスがありそう。

2025年9月17日 82日目
	パレットの設定部分のバグ修正と、EPAL=1 で 256色モードでパレットメモリを読む挙動が抜けていたのを修正
	→ 色が出るようになった。
	→ SCREEN8 32768色中256色パレットモードで、パレットが新仕様で変わることを確認。

2025年9月18日 83日目
	VDPコマンド高速モード・互換モード切替機能実装
	→ 互換モード時のウェイトがまだいい加減な値。実機と比べながら調整が必要。

2025年9月19日 84日目
	HRMMコマンドを実装開始。

2025年9月20日 85日目
	HRMMコマンドは実用性がなさそうなのでキャンセル。LRMMコマンドを実装。

2025年9月21日 86日目
	LRMM で回転動作が機能するのを確認。
	LFMCコマンドを実装開始。上手く動かない。

2025年9月22日 87日目
	LFMCはテストプログラムのバグであることを確認。修正後、期待通りに動作。
	LFMMコマンドを実装。

2025年9月23日 87日目
	LFMMコマンドのバグを修正。
	スプライトモード2 で 16x16スプライトを表示すると、水平に並ぶ最大８枚のうち、
	プライオリティが２番目・４番目・６番目・８番目に来るスプライトの右半分が壊れるバグを修正。

2025年9月24日 88日目
	画面の Y=0 の位置のスプライトが表示されないバグを修正
	画面の上端に一部はみ出したスプライトが表示されないバグを修正

2025年9月25日 89日目
	Sprite mode2 の CC bit の回路が一部未実装だったのを実装
	CC bit の挙動がおかしいのを解析

2025年9月26日 90日目
	CC bit の挙動がおかしいのを修正
	水平 8個表示の確認完了
	スプライトが垂直スクロールについていかないモード（R#20 bit1）を実装、テスト。問題なし。

2025年9月27日 91日目
	スプライトモード３の実装を開始
	→ 一部組み上げては、スプライトモード１、２が壊れていないことを確認
	→ MGX, MGY の設定値を処理するために除算回路を実装

2025年9月28日 92日目
	スプライトモード３の実装の続き
	→ モード３の実装のために、info_collect の中の VRAMリード順を変更

2025年9月29日 93日目
	スプライトモード３の実装完了・デバッグ

2025年9月30日 94日目
	スプライトモード３のデバッグ
	SCREEN5 が VRAM interleave動作になっていたバグを修正

2025年10月1日 95日目
	スプライトモード３のデバッグ
	→ スプライトが表示されない問題を解消、だが半透明OFFの状態で半透明になっている。

2025年10月2日 96日目
	スプライトモード３のデバッグ
	→ 左右反転が上下反転のビットをみていたバグを修正。
	→ 半透明処理を修正。

2025年10月3日 97日目
	スプライトモード３のデバッグ
	→ 概ね正常に動作するようになったが、スプライトを消していくとゴミが表示される場合がある。
	→ Sprite mode1, mode2 の表示が壊れていることに気が付く。
	Sprite16モード追加
	→ Sprite mode1, mode2 でも、水平に 16個までスプライトを表示出来るモードを追加した。

2025年10月4日 98日目
	スプライト全般のデバッグ
	→ Sprite mode1, mode2 の表示が壊れていた問題を修正。Sprite mode3 も少し改善。
	→ Sprite mode3 でゴミが出る問題があったが、テストプログラムのバグによるモノだと判明。

2025年10月5日 99日目
	Sprite mode3 の除算回路で値が大きくなると除算を誤るバグがあったのを修正
	VDP Command 完了割り込みを実装

2025年10月6日 100日目
	垂直同期割込・走査線割込のテストプログラムを作成
	→ 割り込みが発生しないバグを発見。
	→ 垂直同期割込、走査線割込、VDP Command 完了割込の信号が正常に出力されていなかったバグを修正。
	→ 走査線割込のライン番号が、常に垂直スクロールの影響を受けない状態だったバグを修正。

2025年10月7日 101日目
	走査線割込の発生ラインを調べるテストを SC1INTR.COM に追加
	→ 全ラインで発生してしまう。OpenMSX は 0～234。235～255 は発生しない。

2025年10月8日 102日目
	走査線割込の発生ラインを修正
	R#21 bit6 FILレジスタを追加。
	Flat interlace mode（インターレースで 424ライン表示時に、VRAMの並びも 424ラインのフラットな
	並びの扱いになる新モード） を追加。

2025年10月9日 103日目
	Sprite mode3 にすると SCREEN7, 8 でも VRAMアクセスがノーマルアクセスになる動作が正常動作しなかったバグを修正。
	Sprite mode3 で、左にはみ出したスプライトの表示が崩れる問題を発見。

2025年10月10日 104日目
	Sprite mode3 で、左にはみ出したスプライトの表示が崩れる問題を調査。
	Interlace mode で、垂直方向に半画素ずれていなかったバグを修正。

2025年10月11日 105日目
	Sprite mode3 で、左にはみ出したスプライトの表示が崩れる問題は、テストプログラムで、スプライト X の上位にある PG[2:0] に
	X 負数の符号ビットが書かれていたのが原因で発生していた問題だった事が判明。テストバグ。

2025年10月12日 106日目
	Screen6 で、表示に縦筋が入るバグを修正
	Screen6, Screen7 で VDPコマンドを実行した場合の描画が崩れるバグを修正。
	Screen6 で、周辺色に意図しない縦筋が入るバグを修正。

2025年10月13日 106日目
	MSX2++ の起動ロゴ案1を作成

2025年10月14日 106日目
	MSX2++ の起動ロゴ案2を作成

2025年10月15日 106日目
	MSX2++ の起動ロゴ案3を作成開始
	R#25 に SPSレジスタ(bit7)を追加。スプライトのプライオリティシャッフル機能。

2025年10月16日 107日目
	MSX2++ の起動ロゴ案3を作成

2025年10月17日 108日目
	MSX2++ の起動ロゴ案3を作成

2025年10月18日 109日目
	S#2 の HR, VR, EO が 0固定だったバグを修正。
	VDP Command の NX, NY をデクリメントカウンターからインクリメントカウンターへ変更。
	これに伴い、VDP Command のいくつかの挙動が壊れたため、要デバッグ。
	一方で、実行完了後の NYレジスタなどの値が正しくなった。
	MSX2の起動ロゴが正常に動かない問題が解消した。
	VDP Port#3経由では、R#17 に書き込めちゃだめなのに書き込んでしまうバグを修正。

2025年10月19日 110日目
	TangNano20K でのタイミングバイオレーション対策を追加。
	LINE, PSET, POINT, SRCH コマンド実行後に NY の値が変化してしまうバグを修正。

2025年10月20日 111日目
	起動ロゴ案3 の続き
	FS-A1 で起動しない問題の原因調査
		→ V9968カートリッジが、FPGAコンフィグ中に /INT=L, /WAIT=H を出していることが判明。

2025年10月21日 112日目
	MXCビットエミュレーション機能を追加
		→ 裏VRAM に対応したソフトが、正常に裏VRAM が無いことを検知できるように、
		  CPUからの VRAMアクセスのみ、MXC=1 ならマスクするようにした。
